Solution 1: TC: O(m) * O(log2 n)
class Solution {
public:
    bool binarySearch(vector<int> &arr, int target)
    {
        int l = 0;
        int h = arr.size()-1;

        while(l<=h){
            int m = (l+h)/2;
            if(target==arr[m])
            {
                return true;
            }
            else if(target>arr[m])
            {
                l = m + 1;
            }
            else{
                h = m - 1;
            }
        }
        return false;
    }
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size();
        int n = matrix[0].size();

        for(int i = 0;i<m;i++)
        {
            bool find = binarySearch(matrix[i], target);
            if(find)
            {
                return true;
            }
        }
        return false;
    }
};
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Optimise Solution: TC: O(log2(n*m))

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size();
        int n = matrix[0].size();
        int l = 0; int h = m*n-1;

        while(l<=h)
        {
            int mid = (l+h)/2;
            int row = mid/n;
            int col = mid%n;

            if(matrix[row][col] == target)
            {
                return true;
            }
            else if(matrix[row][col]<target){
                l = mid + 1;
            }
            else{
                h = mid - 1;
            }
        }
        return false;
    }
};
