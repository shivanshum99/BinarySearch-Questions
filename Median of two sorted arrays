Brute Force Solution 1: (gives partially accepted)

double median(vector<int>& nums1, vector<int>& nums2) {
  int n1 = nums1.size();
  int n2 = nums2.size();
        int n = n1+n2;
        vector<int> sortedArr ;
        int i = 0; int j = 0;
        while(i<n1 && j<n2)
        {
            if(nums1[i]<nums2[j]) sortedArr.push_back(nums1[i++]);
            else sortedArr.push_back(nums2[j++]);
        }

        while(i<n1)
        {
            sortedArr.push_back(nums1[i++]);
        }
        while(j<n2)
        {
            sortedArr.push_back(nums2[j++]);
        }

        if(n%2 == 1)
        {
            return sortedArr[n/2];
        }
        return (double)((double)sortedArr[n/2]+(double)sortedArr[n/2-1])/2.0;
}

Brute Force Solution 2: (gives partially accepted)

double median(vector<int>& num1, vector<int>& num2) {
	    int n1 = num1.size();
        int n2 = num2.size();
        int n = n1+n2;
        int ind2 = n/2;
        int ind1 = ind2-1;
        int cnt = 0;
        int ele1 = -1; int ele2 = -1;
        int i = 0; int j = 0;
        while(i<n1 && j<n2)
        {
            if(num1[i]<num2[j]){
                if(cnt == ind1) ele1 = num1[i];
                if(cnt == ind2) ele2 = num1[i];
                cnt++;
                i++;
            }
            else{
                if(cnt == ind1) ele1 = num2[j];
                if(cnt == ind2) ele2 = num2[j];
                cnt++;
                j++;
            }
        }

        while(i<n1)
        {
            if(cnt == ind1) ele1 = num1[i];
            if(cnt == ind2) ele2 = num1[i];
            cnt++;
            i++;
        }
        while(j<n2)
        {
            if(cnt == ind1) ele1 = num2[j];
            if(cnt == ind2) ele2 = num2[j];
            cnt++;
            j++;
        }

        if(n%2 == 1)
        {
            return ele2;
        }
        return (double)((double)(ele1+ele2))/2.0;
}
-----------------------------------------------------------------------------------------------------------------------------------------------------
Optimize Solution:
