class Solution {
public:
    int upperBound_lastO(vector<int> &arr, int x, int n){
        int l = 0;
        int e = n-1;
        int m = (l+e)/2;
        int ans = n;

        while(l<=e)
        {
            if(arr[m]>x)
            {
                ans = m;
                e = m-1;
            }
            else{
                l = m+1;
            }
            m = (l+e)/2;
        }
        return ans;	
    }
    int lowerBound_firstO(vector<int> arr, int x, int n) {
        int l = 0;
        int e = n-1;
        int m = (l+e)/2;
        int ans = n;

        while(l<=e)
        {
            if(arr[m]>=x)
            {
                ans = m;
                e = m-1;
            }
            else{
                l = m+1;
            }
            m = (l+e)/2;
        }
	    return ans;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> ans;
        int n = nums.size();
        int lb = lowerBound_firstO(nums, target, n);
        int ub = upperBound_lastO(nums, target, n);

        if(lb == n || nums[lb] != target){
            ans.push_back(-1);
            ans.push_back(-1);
            return ans;
        }
        else{
            ans.push_back(lb);
            ans.push_back(ub-1);
            return ans;
        }
    }
};

//Second Solution

    // int firstO(vector<int>& nums, int target)
    // {
    //     int s = 0;
    //     int e = nums.size() - 1;
    //     int mid = s+(e-s)/2;
    //     int ans = -1;
    //     while(s<=e)
    //     {
    //         if(nums[mid]==target)
    //         {
    //             ans = mid;
    //             e = mid-1;
    //         }
    //         else if(target>nums[mid])
    //         {
    //             s = mid + 1;
    //         }
    //         else{
    //             e = mid - 1;
    //         }
    //         mid = s+(e-s)/2;
    //     }
    //     return ans;
    // }
    // int lastO(vector<int>& nums, int target)
    // {
    //     int s = 0;
    //     int e = nums.size() - 1;
    //     int mid = s+(e-s)/2;
    //     int ans = -1;
    //     while(s<=e)
    //     {
    //         if(nums[mid]==target)
    //         {
    //             ans = mid;
    //             s = mid+1;
    //         }
    //         else if(target>nums[mid])
    //         {
    //             s = mid + 1;
    //         }
    //         else{
    //             e = mid - 1;
    //         }
    //         mid = s+(e-s)/2;
    //     }
    //     return ans;
    // }
    // vector<int> searchRange(vector<int>& nums, int target) {
    //     vector<int> ans;
    //     int f = firstO(nums, target);
    //     int l = lastO(nums, target);

    //     ans.push_back(f);
    //     ans.push_back(l);

    //     return ans;

    // }
