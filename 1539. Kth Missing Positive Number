Brute Force Solution:

class Solution {
public:
    int findKthPositive(vector<int>& arr, int k) {
        for(int i = 0; i<arr.size(); i++){
            if(arr[i]<=k)
            {
                k++;
            }
            else{
                break;
            }
        }
        return k;
    }
};
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Binary Search Solution:

class Solution {
public:
    int findKthPositive(vector<int>& arr, int k) {
       int l = 0;
       int h = arr.size()-1;
       while(l<=h)
       {
           int mid = (l+h)/2;
           int missing = arr[mid]-(mid+1);
           if(missing<k)
           {
               l = mid + 1;
           }
           else{
               h = mid - 1;
           }
       }
       return k + h + 1; //or k+low
    }
};

//arr[] = 2 3 4 7 11 after iteration
//              h l thats why low=h+1
